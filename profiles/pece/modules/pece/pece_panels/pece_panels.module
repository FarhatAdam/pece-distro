<?php

/**
 * @file
 * Code for the PECE Panels.
 */

/**
 * Implements hook_module_implements_alter().
 */
function pece_panels_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter' && isset($implementations['pece_panels'])) {
    $group = $implementations['pece_panels'];
    unset($implementations['pece_panels']);
    $implementations['pece_panels'] = $group;
  }
}

/**
 * Implements hook_menu_alter().
 */
function pece_panels_menu_alter(&$items) {
  $node_info = entity_get_info('node');
  $node_view_modes = array_keys($node_info['view modes']);

  foreach ($node_view_modes as $view_mode) {
    $path = 'node/%node/panelizer/' . $view_mode . '/reset';

    if (!empty($items[$path])) {
      $items[$path]['access callback'] = 'pece_panels_panelizer_reset_access_callback';
      $items[$path]['access arguments'] = array(1);
    }
  }
}

/**
 * Access callback for resetting a node's panelizer. It should always be TRUE when
 * user has updating access to the node.
 */
function pece_panels_panelizer_reset_access_callback($node) {
  $handler = panelizer_entity_plugin_get_handler('node');
  return $handler->entity_access('update', $node);
}

/**
 * Implements hook_ctools_plugin_pre_alter().
 */
function pece_panels_ctools_plugin_pre_alter(&$plugin, &$info) {
  if ($info['module'] === 'panels' && $info['type'] === 'layouts' && $plugin['name'] === 'packery_layout') {
    $plugin['category'] = t('PECE');
  }

  if ($info['module'] === 'panels' && $info['type'] === 'panels_storage' && $plugin['name'] === 'panelizer_entity') {
    $plugin['access callback'] = 'pece_panels_panelizer_entity_panels_storage_access';
  }
}

/**
 * Implements custom access callback to panelizer entity panels_storage.
 *
 * Make sure users can override default panelizer for free_panel nodes. They cannot save
 * an altered default, though.
 */
function pece_panels_panelizer_entity_panels_storage_access($storage_type, $storage_id, $op, $account) {
  list ($entity_type, $entity_id, $panelizer_view_mode, $view_mode) = explode(':', $storage_id);

  if ($op === 'update' && $panelizer_view_mode === 'default' && $view_mode === 'free_panel') {
    return TRUE;
  }

  return panelizer_entity_panels_storage_access($storage_type, $storage_id, $op, $account);
}

/**
 * Implements hook_panels_ipe_access().
 *
 * Control access to IPE when using panelizer.
 */
function pece_panels_panels_ipe_access($display) {
  // Verify if we are working with a panelized display.
  if (!empty($display->context['panelizer'])) {
    $panelizer = $display->context['panelizer'];
    $entity_type = end(array_values($panelizer->type));
    $entity = $panelizer->data;

    $access_result = module_invoke_all('panelizer_ipe_access', $display, $entity_type, $entity);

    // Deny first.
    return in_array(TRUE, $access_result);
  }

  // Deny first.
  return FALSE;
}

/**
 * Implements hook_panelizer_access().
 */
function pece_panels_panelizer_access($op, $entity_type, $bundle, $view_mode, $entity) {
  if ($entity_type !== 'node') {
    return FALSE;
  }

  // Allow resetting to default, but prevent override.
  if ($op === 'defaults' && !empty($entity) && !empty($entity->panelizer[$view_mode]->did)) {
    return TRUE;
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for panels_ipe_edit_control_form().
 *
 * Alter the IPE save control form to hide revisioning info.
 */
function pece_panels_form_panels_ipe_edit_control_form_alter(&$form, &$form_state) {
  if (!empty($form['revision_information'])) {
    $form['revision_information']['#access'] = FALSE;
  }
}

/**
 * Implements hook_entity_info_alter().
 */
function pece_panels_entity_info_alter(&$entity_info) {
  $base_admin_info = array(
    'path' => 'admin/structure/fieldable-panels-panes/manage/%fieldable_panels_pane_type',
    'bundle argument' => 4,
    'access arguments' => array('administer fieldable panels panes'),
  );

  // Fieldable pane for siple node reference rendering.
  $entity_info['fieldable_panels_pane']['bundles']['node'] = array(
    'label' => t('Add content'),
    'pane top level' => TRUE,
    'admin' => $base_admin_info + array(
      'real path' => 'admin/structure/fieldable-panels-panes/manage/node',
    ),
  );
}

/**
 * Implements hook_fieldable_panels_panes_access().
 */
function pece_panels_fieldable_panels_panes_access($op, $fpp = NULL, $account = NULL) {
  if ($op === 'view' && !empty($fpp) && $fpp->bundle === 'node') {
    $node_id = $fpp->field_node[LANGUAGE_NONE][0]['target_id'];
    $node = node_load($node_id);
    return node_access('view', $node);
  }
}

/**
 * Implements hook_form_alter().
 *
 * Hide "advanced" pane options from related forms.
 */
function pece_panels_form_alter(&$form, &$form_state, $form_id) {
  if (!user_access('administer advanced pane settings')) {
    switch ($form_id) {
      case 'fieldable_panels_panes_fieldable_panels_pane_content_type_edit_form':
        $form['view_mode']['#access'] = FALSE;
        $form['language']['#access'] = FALSE;
        $form['admin']['#access'] = FALSE;
        $form['reusable']['#access'] = FALSE;
        $form['revision']['#access'] = FALSE;

        if ($form_state['subtype_name'] === 'node') {
          $form['widget_settings']['#access'] = FALSE;
        }
        break;
    }
  }
}
