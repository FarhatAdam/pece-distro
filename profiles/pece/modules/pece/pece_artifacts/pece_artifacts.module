<?php
/**
 * @file
 * Code for the PECE Artifacts feature.
 */

include_once 'pece_artifacts.features.inc';

// ---
// HELPERS
// ---

/**
 * Extract artifatc's media file type.
 *
 * @param $node         Node object
 * @return mixed|string Media type (audio, image, video)
 */
function _pece_artifacts_node_presave_get_media_type($node) {
  if (strpos($node->type, 'pece_artifact_') === FALSE) return '';
  return str_replace('pece_artifact_', '', $node->type);
}

/**
 * Extract file extension from artifact's media file.
 *
 * @param $node       Node object
 * @return mixed|void File extension
 */
function _pece_artifacts_node_presave_get_file_ext($node) {
  $media_type = _pece_artifacts_node_presave_get_media_type($node);
  $field_media = 'field_pece_media_' . $media_type;
  if (!isset($node->{$field_media})) return;
  // @TODO: Wrap node in a EntityMetadataWrapper.
  $fid = $node->{$field_media}[LANGUAGE_NONE][0]['fid'];
  if (!$fid) return;
  $media_file = file_load_multiple(array($fid));
  return pathinfo($media_file[$fid]->filename, PATHINFO_EXTENSION);
}

/**
 * Autofill artifact's file format field based on its media field.
 *
 * @param $node Node object
 */
function pece_artifacts_autofill_file_format($node) {
  if (!isset($node->field_pece_file_format)) return;
  $media_ext = _pece_artifacts_node_presave_get_file_ext($node);
  // @TODO: Wrap node in a EntityMetadataWrapper.
  $node->field_pece_file_format[LANGUAGE_NONE][0]['value'] = $media_ext;
}

// ---
// HOOKS
// ---

/**
 * Implements hook_form_alter().
 */
function pece_artifacts_form_alter(&$form, &$form_state, $form_id) {
  module_load_include('inc', 'pece_artifacts', 'pece_artifacts.functions');

  $artifacts = pece_artifacts_fetch_all_types();
  $is_node_form = !empty($form['#node_edit_form']) && isset($form['#node']->type);
  $is_artifact_form = $is_node_form && in_array($form['#node']->type, $artifacts);

  if ($is_artifact_form) {
    _pece_artifacts_form_pece_artifact_form_alter($form, $form_state);
  }
}

/**
 * Default form alter for PECE's artifacts.
 */
function _pece_artifacts_form_pece_artifact_form_alter(&$form, &$form_state) {
  // @TODO: show URI field once API is available.
  $form['field_pece_uri']['#access'] = FALSE;
  // Hide the comment settings fieldset.
  $form['comment_settings']['#access'] = FALSE;
  // We cannot allow the content to be authored by anonymous.
  $form['author']['name']['#required'] = TRUE;
  // Hide file_format due to autofill during presave hook.
  // @see pece_artifacts_node_presave().
  $form['field_pece_file_format']['#access'] = FALSE;

  // Hide/show location fieldset based on fieldsite location usage flag.
  if (!empty($form['field_pece_use_fieldsite_local'])) {
    $form['field_pece_location']['#states']['visible']['#edit-field-pece-use-fieldsite-local input'] = array(
      'checked' => FALSE,
    );
  }
}

/**
 * Implements hook_node_presave().
 */
function pece_artifacts_node_presave($node) {
  if (!in_array($node->type, pece_artifacts_fetch_all_types())) return;

  module_load_include('inc', 'pece_artifacts', 'pece_artifacts.functions');
  pece_artifacts_autofill_file_format($node);
  $use_fieldsite_location = field_get_items('node', $node, 'field_pece_use_fieldsite_local');
  if (!empty($use_fieldsite_location[0]['value'])) {
    // Remove any current data from the artifact's location field.
    $node->field_pece_location[LANGUAGE_NONE] = array();

    $fieldsite_field = field_get_items('node', $node, 'field_pece_fieldsite');
    if (!empty($fieldsite_field[0]['target_id'])) {
      $fieldsite = node_load($fieldsite_field[0]['target_id']);
      $node->field_pece_location = $fieldsite->field_pece_location;
    }
  }
}

/**
 * Implements hook_node_update().
 */
function pece_artifacts_node_update($node) {
  if ($node->type == 'pece_fieldsite') {
    module_load_include('inc', 'pece_artifacts', 'pece_artifacts.functions');
    $artifacts = pece_artifacts_fetch_all_types();

    $query = new EntityFieldQuery();
    $result = $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', $artifacts)
      ->fieldCondition('field_pece_fieldsite', 'target_id', $node->nid)
      ->fieldCondition('field_pece_use_fieldsite_local', 'value', TRUE)
      ->execute();

    if (isset($result['node'])) {
      // Execution time cache is not clean until after this hook is performed; although
      // the node's data is already saved to the database.
      entity_get_controller('node')->resetCache(array($node->nid));

      $artifacts_ids = array_keys($result['node']);
      $artifacts = entity_load('node', $artifacts_ids);
      foreach ($artifacts as $artifact) {
        node_save($artifact);
      }
    }
  }
}

/**
* Get the available Artifacts.
*/
function pece_artifacts_fetch_all_types() {
 $artifacts = module_invoke_all('pece_artifact_types_info');
 drupal_alter('pece_artifact_types_info', $artifacts);
 return $artifacts;
}

/**
 * Implements hook_pece_artifact_types_info().
 */
function pece_artifacts_pece_artifact_types_info($only_enabled = TRUE) {
  $node_types = node_type_get_types();
  $artifacts = array();
  $prefix = 'pece_artifact_';

  foreach ($node_types as $node_type => $node_type_info) {
    $is_artifact = substr($node_type, 0, strlen($prefix)) == $prefix;
    if ($is_artifact && (!$only_enabled || !$node_type_info->disabled)) {
      $artifacts[$node_type] = $node_type;
    }
  }

  return $artifacts;
}
