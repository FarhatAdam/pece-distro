<?php

/**
 * @file
 * Code for the PECE Access.
 */

define('PECE_ACCESS_RESEARCHER_ROLE', 'Researcher');

/**
 * Implements hook_views_query_alter().
 */
function pece_access_views_query_alter(&$view, &$query) {
  global $user;
  // If the input for the title filter is a positive integer, filter against
  // node ID instead of node title.
  $views = array(
    'pece_group_field_diary',
    'pece_user_field_diary',
  );

  if (in_array($view->name, $views)) {
    $conditions = &$query->where;
    // Traverse through the 'where' part of the query.
    foreach ($conditions as &$condition_group) {
      foreach ($condition_group['conditions'] as &$condition) {
        // If this is the part of the query filtering on title, change the
        // condition to filter on node ID.
        if ($condition['field'] == 'users_node.uid') {
          $condition['value'] = $user->uid;
        }
      }
    }
    if (!in_array('Researcher', $user->roles)) {
      unset($conditions[2]);
    }
  }
}

/**
 * Implements hook_node_access().
 */
function pece_access_node_access($node, $op, $account) {
  if ($op != 'view' || !in_array($node->type, pece_access_artifact_node_types())) {
    return NODE_ACCESS_IGNORE;
  }

  return pece_access_view_access($node, $account) ? NODE_ACCESS_ALLOW : NODE_ACCESS_DENY;
}

/**
 * Implements hook_entity_presave().
 */
function pece_access_entity_presave($entity, $type) {
  if ($type != 'node') {
    return;
  }

  $types_field_map = pece_access_artifact_node_types_file_fields();

  if (!in_array($entity->type, array_keys($types_field_map))) {
    return;
  }

  $node_wrapper = entity_metadata_wrapper('node', $entity);
  $field_name = $types_field_map[$entity->type];
  $field_value = $node_wrapper->$field_name->value();

  if (empty($field_value)) {
    return;
  }

  $file = file_load($field_value['fid']);

  if (empty($file)) {
    return;
  }

  $scheme = file_uri_scheme($file->uri);
  $node_permission = pece_access_node_permission($entity);
  $private_permissions = array('restricted', 'private');

  if ($scheme == 'public' && in_array($node_permission, $private_permissions)) {
    // Move file from public to private.
    pece_access_move_file($file, 'private');
  }
  elseif ($scheme == 'private' && $node_permission == 'open') {
    // Move file from private to public.
    pece_access_move_file($file, 'public');
  }

}

/**
 * Implements hook_file_entity_access().
 */
function pece_access_file_entity_access($op, $file, $account) {
  if ($op != 'view') {
    return FILE_ENTITY_ACCESS_IGNORE;
  }

  $types_field_map = pece_access_artifact_node_types_file_fields();

  // Build query to get all nodes that reference this file.
  $query = db_select('node', 'n')
      ->fields('n', array('nid'))
      ->condition('n.type', array_keys($types_field_map), 'IN');

  $table_counter = 1;
  $or = db_or();
  foreach($types_field_map as $node_type => $file_field) {
    $table_alias = 'fd_' . $table_counter;
    $field_name_db = $file_field . '_fid';

    $query->leftJoin('field_data_' . $file_field, $table_alias, '(' . $table_alias . '.entity_id = n.nid )');
    $or->condition($table_alias . '.' . $field_name_db, $file->fid);

    $table_counter++;
  }

  $result = $query
    ->condition($or)
    ->execute()
    ->fetchCol();

  if (empty($result)) {
    return FILE_ENTITY_ACCESS_IGNORE;
  }

  $nodes = node_load_multiple($result);

  $grants = array();
  foreach ($nodes as $node) {
    $grants[] = pece_access_view_access($node, $account);
  }

  return in_array(FALSE, $grants) ? FILE_ENTITY_ACCESS_DENY : FILE_ENTITY_ACCESS_ALLOW;
}

/**
 * Helper function for getting access to a node based on PECE specific rules.
 */
function pece_access_view_access($node, $account) {
  $artifact_node_types = pece_access_artifact_node_types();

  if (in_array($node->type, $artifact_node_types)) {
    $is_owner = ($account->uid === $node->uid);
    $node_permission = pece_access_node_permission($node);

    switch ($node_permission) {
      case 'open':
        return TRUE;

      case 'private':
        return $is_owner;

      case 'restricted':
        return ($is_owner || in_array(PECE_ACCESS_RESEARCHER_ROLE, $account->roles));
    }
  }

}

/**
 * Get permissions settings for a node based on PECE specific rules.
 */
function pece_access_node_permission($node) {
  $node_wrapper = entity_metadata_wrapper('node', $node);
  return $node_wrapper->field_permissions->value();
}

/**
 * Move a file form public to private and vice-versa.
 */
function pece_access_move_file($file, $scheme) {
  $original_scheme = ($scheme == 'public') ? 'private' : 'public';
  $destination = str_replace($original_scheme . '://', $scheme .'://', $file->uri);

  if (file_move($file, $destination)) {
    drupal_set_message(t('The file was moved from %from to %dest.', array(
      '%from' => $original_scheme,
      '%dest' => $scheme,
    )));
  }
}

/**
 * Helper function to provide a list of artifact node types.
 */
function pece_access_artifact_node_types() {
  return array(
    'pece_artifact',
    'pece_artifact_audio',
    'pece_artifact_fieldnote',
    'pece_artifact_image',
    'pece_artifact_pdf',
    'pece_artifact_text',
    'pece_artifact_video',
    'pece_artifact_website',
  );
}

/**
 * Helper function to provide a list of artifact node types along with their
 * file fields.
 */
function pece_access_artifact_node_types_file_fields() {
  return array(
    'pece_artifact_audio' => 'field_pece_media_audio',
    'pece_artifact_image' => 'field_pece_media_image',
    'pece_artifact_pdf' => 'field_pece_media_pdf',
    'pece_artifact_video' => 'field_pece_media_video',
  );
}
